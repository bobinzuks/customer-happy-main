version: '3.8'

services:
  # CustomerHappy Application
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:customer_happy_2024@db:5432/customer_happy
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-production-jwt-secret-here
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
    networks:
      - customer_happy_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=customer_happy
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=customer_happy_2024
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - customer_happy_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d customer_happy"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass customer_happy_redis_2024
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - customer_happy_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "customer_happy_redis_2024", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx Load Balancer / Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - customer_happy_network
    restart: unless-stopped

  # Database Backup Service
  backup:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=customer_happy
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=customer_happy_2024
      - PGHOST=db
    volumes:
      - ./backups:/backups
      - ./backup.sh:/backup.sh:ro
    networks:
      - customer_happy_network
    restart: "no"
    profiles:
      - backup
    command: /backup.sh

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  customer_happy_network:
    driver: bridge